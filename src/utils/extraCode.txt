//The reason why your useEffect hook is infinitely rendering is because of the 
//way you are defining your inventoryCollection variable(when it was declared inside the Profile comp).
//When you define inventoryCollection variable, you are creating a new object reference on each render. 
//This means that every time the component re-renders, inventoryCollection will be a new object reference, 
//causing the useEffect to be re-triggered.

// Add new Item to Inventory states & clear input fields
// const [category, setCategory] = useState<string>("")
// const [item, setItem] = useState<string>("")
// const [price, setPrice] = useState<number>(0)
// const [isInStock, setIsInStock] = useState<boolean>(true)

// const onSubmitItem = async () => {
//     try{
//         console.log('product added.')
//         getProducts()

//     }catch(err){
//         console.error(err)
//     }
// }


{/* <div className="add-items-container">
        <p>Add item to shop. </p>
        <form>
            <input type="text" placeholder="Category" onChange={(e)=>setCategory(e.target.value)}/>
            <input type="text" placeholder="Item" onChange={(e)=>setItem(e.target.value)} />
            <input type="number" placeholder="Price" onChange={(e)=> setPrice(Number(e.target.value))}/>
            <br/>
            <label>
            <input type="checkbox" checked={isInStock} onChange={(e)=>setIsInStock(e.target.checked)} />
            in stock
            </label> <br/>
    
            <button type="button" onClick={onSubmitItem}>Submit</button>
        </form>
    </div> */}

//  FILE UPLOADING CODE FIREBASE
// eslint-disable-next-line
{/* <p>Add a file.</p>
<input type="file" onChange={(e) => setFileUpload(e.target.files)}/>
<button onClick={uploadFiles}> Add </button> */}

// const [fileUpload, setFileUpload] = useState<any>(null)
    
//     const uploadFiles = async () => {
//         if (!fileUpload) return;
//         try {
//         const filesFolderRef = ref(storage, `projectFiles/${fileUpload.name}`);
//       await uploadBytes(filesFolderRef, fileUpload);
//     } catch (err) {
//       console.error(err);
//     }
//    }